# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes auto; #some last versions calculate it automatically

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 100000;

# only log critical errors
error_log /var/log/nginx/error.log crit;

# provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 4000;
}

# Default server definition
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen [::]:8080 default_server;
    listen 8080 default_server;
    server_name _;

    sendfile off;
    tcp_nodelay on;
    absolute_redirect off;

    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # to boost I/O on HDD we can disable access logs
    access_log off;

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # Set it to like 10MB (5MB is for images, but a bit higher just in case)
    client_max_body_size 10m;
    large_client_header_buffers 4 32k;

    root /var/www/html/public;
    index index.php index.html;

    # location / {
    #     # First attempt to serve request as file, then
    #     # as directory, then fall back to index.php
    #     try_files $uri $uri/ /index.php?$args;
    # }

    # Redirect server error pages to the static page /50x.html
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /var/lib/nginx/html;
    }
    
    # Legacy API support
    location ~ /api.php {
        rewrite ^/api.php$ /v2API?$args permanent;
    }

    location /index.php {
        try_files /not_exists @octane;
    }
 
    # For mod files which can be big
    location ~ ^/mods/[0-9a-z]+/files$ {
        client_max_body_size 2000m;
        client_body_timeout 3600s;
    }

    location / {
        try_files $uri $uri/ @octane;
    }
    
    location @octane {
        set $suffix "";
 
        if ($uri = /index.php) {
            set $suffix ?$query_string;
        }
 
        proxy_http_version 1.1;
        proxy_set_header Host $http_host;
        proxy_set_header Scheme $scheme;
        proxy_set_header SERVER_PORT $server_port;
        proxy_set_header REMOTE_ADDR $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
 
        proxy_pass http://127.0.0.1:9000$suffix;
    }

    # Set the cache-control headers on assets to cache for 5 days
    location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
        expires 5d;
    }

    # Deny access to . files, for security
    location ~ /\. {
        log_not_found off;
        deny all;
    }

    # # Allow fpm ping and status from localhost
    # location ~ ^/(fpm-status|fpm-ping)$ {
    #     access_log off;
    #     allow 127.0.0.1;
    #     deny all;
    #     fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    #     include fastcgi_params;
    #     fastcgi_pass unix:/run/php-fpm.sock;
    # }
}